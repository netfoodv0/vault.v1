#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Iniciando migra√ß√£o do projeto...\n');

// Fun√ß√£o para verificar se um diret√≥rio existe
function directoryExists(dirPath) {
  return fs.existsSync(dirPath);
}

// Fun√ß√£o para copiar diret√≥rio recursivamente
function copyDirectory(source, destination) {
  if (!fs.existsSync(destination)) {
    fs.mkdirSync(destination, { recursive: true });
  }

  const items = fs.readdirSync(source);
  
  for (const item of items) {
    const sourcePath = path.join(source, item);
    const destPath = path.join(destination, item);
    
    const stat = fs.statSync(sourcePath);
    
    if (stat.isDirectory()) {
      copyDirectory(sourcePath, destPath);
    } else {
      fs.copyFileSync(sourcePath, destPath);
    }
  }
}

// Fun√ß√£o para copiar arquivo
function copyFile(source, destination) {
  if (fs.existsSync(source)) {
    fs.copyFileSync(source, destination);
    console.log(`‚úÖ Copiado: ${source} -> ${destination}`);
  } else {
    console.log(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${source}`);
  }
}

// Fun√ß√£o para executar comando
function runCommand(command, description) {
  try {
    console.log(`üîÑ ${description}...`);
    execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ ${description} conclu√≠do`);
  } catch (error) {
    console.error(`‚ùå Erro ao ${description}:`, error.message);
    process.exit(1);
  }
}

// Fun√ß√£o principal de migra√ß√£o
function migrateProject() {
  const currentDir = process.cwd();
  const projectName = process.argv[2] || 'projeto-migrado';
  const targetDir = path.join(currentDir, '..', projectName);
  
  console.log(`üìÅ Diret√≥rio de destino: ${targetDir}\n`);
  
  // Verificar se o diret√≥rio de destino j√° existe
  if (directoryExists(targetDir)) {
    console.log(`‚ùå O diret√≥rio ${projectName} j√° existe!`);
    console.log('Por favor, escolha um nome diferente ou remova o diret√≥rio existente.');
    process.exit(1);
  }
  
  // Criar diret√≥rio de destino
  console.log('üìÅ Criando diret√≥rio de destino...');
  fs.mkdirSync(targetDir, { recursive: true });
  
  // Copiar estrutura de pastas
  const foldersToCopy = [
    'src',
    'public',
    'scripts'
  ];
  
  console.log('\nüìÅ Copiando estrutura de pastas...');
  for (const folder of foldersToCopy) {
    if (directoryExists(folder)) {
      copyDirectory(folder, path.join(targetDir, folder));
      console.log(`‚úÖ Pasta copiada: ${folder}`);
    } else {
      console.log(`‚ö†Ô∏è  Pasta n√£o encontrada: ${folder}`);
    }
  }
  
  // Copiar arquivos de configura√ß√£o
  const configFiles = [
    'package.json',
    'tsconfig.json',
    'tailwind.config.js',
    'next.config.js',
    'postcss.config.js',
    'middleware.ts',
    'firebase.json',
    'firestore.rules',
    'firestore.indexes.json',
    '.firebaserc',
    '.gitignore'
  ];
  
  console.log('\nüìÑ Copiando arquivos de configura√ß√£o...');
  for (const file of configFiles) {
    copyFile(file, path.join(targetDir, file));
  }
  
  // Navegar para o diret√≥rio de destino
  process.chdir(targetDir);
  
  // Instalar depend√™ncias
  console.log('\nüì¶ Instalando depend√™ncias...');
  runCommand('npm install', 'Instalar depend√™ncias');
  
  // Verificar se o projeto est√° funcionando
  console.log('\nüîç Verificando configura√ß√£o...');
  
  try {
    // Verificar TypeScript
    runCommand('npm run type-check', 'Verificar tipos TypeScript');
  } catch (error) {
    console.log('‚ö†Ô∏è  Erro na verifica√ß√£o de tipos. Isso √© normal se houver configura√ß√µes pendentes.');
  }
  
  // Criar arquivo .env.local de exemplo
  const envExample = `# Firebase Configuration
NEXT_PUBLIC_FIREBASE_API_KEY=your_api_key_here
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_auth_domain_here
NEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id_here
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_storage_bucket_here
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id_here
NEXT_PUBLIC_FIREBASE_APP_ID=your_app_id_here

# Cloudinary (se usado)
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=your_cloud_name_here
CLOUDINARY_API_KEY=your_api_key_here
CLOUDINARY_API_SECRET=your_api_secret_here

# Google Maps (se usado)
NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=your_google_maps_key_here

# Outras vari√°veis espec√≠ficas do seu projeto
`;
  
  fs.writeFileSync(path.join(targetDir, '.env.local.example'), envExample);
  console.log('‚úÖ Arquivo .env.local.example criado');
  
  // Criar README de migra√ß√£o
  const readmeContent = `# Projeto Migrado

Este projeto foi migrado automaticamente. 

## Pr√≥ximos Passos

1. **Configurar vari√°veis de ambiente:**
   \`\`\`bash
   cp .env.local.example .env.local
   # Editar .env.local com suas credenciais
   \`\`\`

2. **Configurar Firebase:**
   \`\`\`bash
   npm install -g firebase-tools
   firebase login
   firebase init
   \`\`\`

3. **Testar o projeto:**
   \`\`\`bash
   npm run dev
   \`\`\`

4. **Verificar funcionalidades:**
   - [ ] Autentica√ß√£o Firebase
   - [ ] Integra√ß√£o com Google Maps
   - [ ] Upload de imagens (Cloudinary)
   - [ ] QR Code generation
   - [ ] Todas as p√°ginas funcionando

## Estrutura do Projeto

- \`src/app/\` - P√°ginas e rotas (App Router)
- \`src/components/\` - Componentes React
- \`src/hooks/\` - Custom hooks
- \`src/lib/\` - Configura√ß√µes e utilit√°rios
- \`src/types/\` - Defini√ß√µes TypeScript
- \`public/\` - Arquivos est√°ticos

## Scripts Dispon√≠veis

- \`npm run dev\` - Desenvolvimento
- \`npm run build\` - Build de produ√ß√£o
- \`npm run start\` - Servidor de produ√ß√£o
- \`npm run lint\` - Verificar c√≥digo
- \`npm run type-check\` - Verificar tipos TypeScript

## Tecnologias Utilizadas

- Next.js 14 (App Router)
- TypeScript
- Tailwind CSS
- Firebase (Auth, Firestore, Storage)
- Google Maps API
- Cloudinary
- React Hook Form
- Zustand (State Management)
- Framer Motion
- Recharts (Gr√°ficos)
- QR Code generation

## Suporte

Se encontrar problemas, consulte o arquivo \`MIGRACAO_GUIA.md\` no projeto original.
`;
  
  fs.writeFileSync(path.join(targetDir, 'README.md'), readmeContent);
  console.log('‚úÖ README.md criado');
  
  console.log('\nüéâ Migra√ß√£o conclu√≠da com sucesso!');
  console.log(`\nüìÅ Projeto migrado para: ${targetDir}`);
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('1. cd ' + projectName);
  console.log('2. cp .env.local.example .env.local');
  console.log('3. Editar .env.local com suas credenciais');
  console.log('4. npm run dev');
  console.log('\nüìñ Consulte o README.md para mais informa√ß√µes');
}

// Executar migra√ß√£o
if (require.main === module) {
  migrateProject();
}

module.exports = { migrateProject }; 